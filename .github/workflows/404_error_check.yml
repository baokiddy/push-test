name: Scan Markdown Files for 404 Errors

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily (adjust as needed)
  workflow_dispatch: # Allows manual triggering

jobs:
  scan-md-404-errors:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Install necessary tools
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y curl grep sed

      # Step 3: Debugging step to list all .md files
      - name: Debug Markdown Files
        run: |
          echo "Markdown files found:"
          find . -name "*.md" || echo "No Markdown files found."

          echo "Contents of Markdown files:"
          find . -name "*.md" -exec cat {} \; || echo "No Markdown files found."

          echo "Extracted Markdown Links:"
          find . -name "*.md" -exec grep -oP '\[([^\]]+)\]\(([^)]+)\)' {} \; || echo "No Markdown links found."

          echo "Extracted Plain URLs:"
          find . -name "*.md" -exec grep -oP 'http[s]?://[^\s)]+|www\.[^\s)]+|ftp://[^\s)]+|file://[^\s)]+' {} \; || echo "No plain URLs found."

      # Step 4: Scan Markdown files for broken links
      - name: Scan Markdown Files for Broken Links
        run: |
          touch md-404-errors.log # Ensure log file is created

          find . -name "*.md" | while read file; do
            echo "Processing $file..."

            # Check Markdown-style links
            while IFS= read -r link; do
              url=$(echo "$link" | grep -oP '\(([^)]+)\)' | tr -d '()')
              if [[ -n "$url" ]]; then
                echo "Checking Markdown URL: $url"
                if [[ "$url" == *"github.com"* ]]; then
                  # Convert GitHub URL to raw content URL
                  raw_url=$(echo "$url" | sed 's/github\.com\/\([^/]*\)\/\([^/]*\)\/edit\/.*\/\(.*\)/raw\.githubusercontent\.com\/\1\/\2\/main\/\2/')

                  # Debugging: Echo the raw URL to check if it's correct
                  echo "Raw URL: $raw_url"

                  # Check if raw_url is empty, if so, use the original url
                  if [[ -z "$raw_url" ]]; then
                    raw_url="$url"
                  fi

                  status_code=$(curl -o /dev/null -s -w "%{http_code}" "$raw_url" || true)
                  if [ "$status_code" == "404" ]; then
                    echo "404 Error (GitHub raw content) in $file: $url" >> md-404-errors.log
                  else
                    echo "Valid GitHub raw content: $raw_url"
                  fi
                else
                  status_code=$(curl -o /dev/null -s -w "%{http_code}" "$url" || true)
                  if [ "$status_code" == "404" ]; then
                    echo "404 Error (Markdown link) in $file: $url" >> md-404-errors.log
                  fi
                fi
              else
                echo "No URL found in Markdown link: $link"
              fi
            done < <(grep -oP '\[([^\]]+)\]\(([^)]+)\)' "$file")

            # Check plain URLs
            while IFS= read -r url; do
              echo "Checking Plain URL: $url"
              if [[ "$url" == *"github.com"* ]]; then
                # Convert GitHub URL to raw content URL
                raw_url=$(echo "$url" | sed 's/github\.com\/\([^/]*\)\/\([^/]*\)\/edit\/.*\/\(.*\)/raw\.githubusercontent\.com\/\1\/\2\/main\/\2/')

                # Debugging: Echo the raw URL to check if it's correct
                echo "Raw URL: $raw_url"

                # Check if raw_url is empty, if so, use the original url
                if [[ -z "$raw_url" ]]; then
                  raw_url="$url"
                fi

                status_code=$(curl -o /dev/null -s -w "%{http_code}" "$raw_url" || true)
                if [ "$status_code" == "404" ]; then
                  echo "404 Error (GitHub raw content) in $file: $url" >> md-404-errors.log
                else
                  echo "Valid GitHub raw content: $raw_url"
                fi
              else
                status_code=$(curl -o /dev/null -s -w "%{http_code}" "$url" || true)
                if [ "$status_code" == "404" ]; then
                  echo "404 Error (Plain URL) in $file: $url" >> md-404-errors.log
                fi
              fi
            done < <(grep -oP 'http[s]?://[^\s)]+|www\.[^\s)]+|ftp://[^\s)]+|file://[^\s)]+' "$file")
          done

          if [ ! -s md-404-errors.log ]; then
            echo "No broken links found." >> md-404-errors.log
          fi

      # Step 5: Upload log file as an artifact
      - name: Upload Log File
        uses: actions/upload-artifact@v4
        with:
          name: md-404-errors-log
          path: md-404-errors.log
